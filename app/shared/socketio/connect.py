import logging

import socketio

from auth.query.devices import get_or_add_user_device, update_device_status
from auth.token import get_jwt_subject
from chat.actions import GET, UPDATE, JOIN
from chat.actions.user_create import create_support_dialog_and_send_welcome_message
from chat.channels import STATIC_DIALOG, CHANNEL_USERS
from chat.crud.dialog import get_dialogs_by_user_id
from chat.query.users_for_dialogs import get_users_by_dialog_ids
from chat.schema import SessionUser
from config import ADMIN_ORIGIN
from events import async_event_manager
from logger import socketio_logger
from shared.crud import get_user
from shared.socketio.header_utils import user_device_from_header_auth, get_access_token

sio = socketio.AsyncServer(async_mode="asgi", cors_allowed_origins=[], logger=socketio_logger)
sio_app = socketio.ASGIApp(sio)

logger = logging.getLogger('sio')
logger_chat = logging.getLogger('chat')

CONNECT = 'connect'
DISCONNECT = 'disconnect'


async def after_create_user(user_id: int):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–æ–≤—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è """
    welcome_text = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏! 
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–≤–∞–π—Ç–µ –∏—Ö –∑–¥–µ—Å—å.
–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ—Ç–∑—ã–≤—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º—ã –±—É–¥–µ–º —Ä–∞–¥—ã –∏—Ö —É—Å–ª—ã—à–∞—Ç—å. """
    await create_support_dialog_and_send_welcome_message(sio, user_id=user_id, welcome_text=welcome_text)


async_event_manager.subscribe("AFTER_CREATE_USER", after_create_user)


@sio.on(DISCONNECT)
async def disconnect(sid, *args, **kwargs):
    user = await sio.get_session(sid)
    if user:
        await update_device_status(user.id, user.device_id, is_connected=False)
        dialogs = await get_dialogs_by_user_id(user.id)
        user_instances = await get_users_by_dialog_ids([item.id for item in dialogs])
        await notify_users_status_user(user, user_instances)
        for dialog in dialogs:
            sio.leave_room(sid, dialog.id)
        logger.info(DISCONNECT, '', user.username)
    logger.info(DISCONNECT, '', "unanimous")


@sio.on('*')
def catch_all(event, sid, data):
    print(event)


@sio.on(CONNECT)
async def connect(sid, environ, auth):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.
    –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–µ—Å—Å–∏–∏.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–∏–∞–ª–æ–≥–∞–º.
    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ –¥–∏–∞–ª–æ–≥–∞–º.

    :param dict auth: —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è WebSocket)
    :param dict environ: —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (–¥–ª—è HTTP Polling)
    :param str sid: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
    """
    access_token = get_access_token(sid, auth, environ)
    if access_token:
        logger.info("TOKEN", sid, "‚úîÔ∏è")
        user = await get_authenticated_user(access_token, sid)

        if user:
            device_info = user_device_from_header_auth(user.id, auth)
            device = await get_or_add_user_device(user.id, device_info)  # TODO: –Ω–µ –Ω–∞–¥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å, –∫–æ–≥–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–Ω–æ–≤—å —Å–æ–∑–¥–∞–Ω–æ
            device = await update_device_status(user.id, device.id, is_connected=True)

            await sio.save_session(sid, SessionUser(id=user.id, username=user.username, is_superuser=user.is_superuser, device_id=device.id))
            logger.info(device_info.os, user.username, f"SID: {sid}", extra={'action': device_info.model})
            await check_user_dialog_permissions(user, environ, sid)
            await join_room(user, sid)
        else:
            await sio.disconnect(sid)
            logger.error("üëΩÔ∏è", '', "–Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        await sio.disconnect(sid)
        logger.info("TOKEN", '', "üñï")


async def get_authenticated_user(access_token, sid):
    """–ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞."""
    pk = get_jwt_subject(access_token)
    if pk:
        user = await get_user(pk)
        return user
    else:
        await sio.disconnect(sid)


async def check_user_dialog_permissions(user, environ, sid):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥–∏–∞–ª–æ–≥–∞–º.
    –ï—Å–ª–∏ –∞–¥–º–∏–Ω –∑–∞—à–µ–ª –∏–∑ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
    """
    if user.is_superuser and not any(origin in environ.get("HTTP_ORIGIN") for origin in ADMIN_ORIGIN):
        await sio.emit('error', {"message": "–í —á–∞—Ç–µ –¥–∏–∞–ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤.", "type": "warning"}, room=sid)
        logger_chat("–ê–¥–º–∏–Ω! —Ç—ã —á—Ç–æ —Ç—É—Ç –∑–∞–±—ã–ª?")


async def notify_users_status_user(user, user_instances):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –¥–∏–∞–ª–æ–≥–∞—Ö –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ,
     –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ.

    :param user: –æ–±—ä–µ–∫—Ç User, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    :param user_instances: —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ User, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–µ—Ö –∂–µ –¥–∏–∞–ª–æ–≥–∞—Ö, —á—Ç–æ –∏ user
    :return: None
    """
    self_instance = next(filter(lambda inst: inst.id == user.id, user_instances), None)
    for instance in user_instances:
        await sio.emit(CHANNEL_USERS, {
            "action": UPDATE,
            "data": dict(self_instance)
        }, room=instance.id)


async def join_room(user: SessionUser, sid: str) -> None:
    """
    –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –µ–≥–æ –∫–æ–º–Ω–∞—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ [users] –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –µ–≥–æ –Ω–∞ –∫–æ–º–Ω–∞—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤,
    –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω —É—á–∞—Å—Ç–≤—É–µ—Ç. –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–º—É –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ –∏ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —É—á–∞—Å—Ç–≤—É—é—â–∏–º –≤ —ç—Ç–∏—Ö
    –¥–∏–∞–ª–æ–≥–∞—Ö.

    :param user: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ User, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    :param sid: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–∫–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    # –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª [users]
    sio.enter_room(sid, user.id)
    # logger.info(JOIN, f"{user.username} ROOM: {user.id}")
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —ç—Ç–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤
    dialogs = await get_dialogs_by_user_id(user.id)
    user_instances = await get_users_by_dialog_ids([d.id for d in dialogs])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–Ω—ã–µ –æ–±–æ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö –¥–∏–∞–ª–æ–≥–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω —É—á–∞—Å—Ç–≤—É–µ—Ç
    await sio.emit(CHANNEL_USERS, {
        "action": GET,
        "data": [dict(item) for item in user_instances if item.id != user.id]
    }, room=user.id)

    # –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ô –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –∫ –∫–æ–º–Ω–∞—Ç–µ –î–∏–∞–ª–æ–≥–∞ –≥–¥–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç User
    for dialog in dialogs:
        sio.enter_room(sid, STATIC_DIALOG(dialog.id))

    await notify_users_status_user(user, user_instances)
